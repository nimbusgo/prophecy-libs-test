{
  "metainfo" : {
    "id" : "1",
    "language" : "scala",
    "fabricId" : "1174",
    "frontEndLanguage" : "sql",
    "mode" : "batch",
    "udfs" : {
      "language" : "scala",
      "udfs" : [ ],
      "functionPackageName" : "prophecy_nimbus_team.prophecylibstest.functions",
      "sharedFunctionPackageNames" : [ ]
    },
    "udafs" : {
      "language" : "scala",
      "code" : "package udfs\n\nimport org.apache.spark.sql.expressions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql._\n\n/**\n  * Here you can define your custom aggregate functions.\n  *\n  * Make sure to register your `udafs` in the register_udafs function below.\n  *\n  * Example:\n  *\n  * object GeometricMean extends UserDefinedAggregateFunction {\n  *   // This is the input fields for your aggregate function.\n  *   override def inputSchema: org.apache.spark.sql.types.StructType =\n  *     StructType(StructField(\"value\", DoubleType) :: Nil)\n  *\n  *   // This is the internal fields you keep for computing your aggregate.\n  *   override def bufferSchema: StructType = StructType(\n  *     StructField(\"count\", LongType) ::\n  *     StructField(\"product\", DoubleType) :: Nil\n  *   )\n  *\n  *   // This is the output type of your aggregatation function.\n  *   override def dataType: DataType = DoubleType\n  *\n  *   override def deterministic: Boolean = true\n  *\n  *   // This is the initial value for your buffer schema.\n  *   override def initialize(buffer: MutableAggregationBuffer): Unit = {\n  *     buffer(0) = 0L\n  *     buffer(1) = 1.0\n  *   }\n  *\n  *   // This is how to update your buffer schema given an input.\n  *   override def update(buffer: MutableAggregationBuffer, input: Row): Unit = {\n  *     buffer(0) = buffer.getAs[Long](0) + 1\n  *     buffer(1) = buffer.getAs[Double](1) * input.getAs[Double](0)\n  *   }\n  *\n  *   // This is how to merge two objects with the bufferSchema type.\n  *   override def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = {\n  *     buffer1(0) = buffer1.getAs[Long](0) + buffer2.getAs[Long](0)\n  *     buffer1(1) = buffer1.getAs[Double](1) * buffer2.getAs[Double](1)\n  *   }\n  *\n  *   // This is where you output the final value, given the final value of your bufferSchema.\n  *   override def evaluate(buffer: Row): Any = {\n  *     math.pow(buffer.getDouble(1), 1.toDouble / buffer.getLong(0))\n  *   }\n  * }\n  *\n  */\n\n\nobject UDAFs {\n  /**\n    * Registers UDAFs with Spark SQL\n    */\n  def registerUDAFs(spark: SparkSession): Unit = {\n    /**\n      * Example:\n      *\n      * spark.udf.register(\"gm\", GeometricMean)\n      *\n      */\n\n\n  }\n}\n"
    },
    "configuration" : {
      "common" : {
        "type" : "record",
        "fields" : [ ]
      },
      "oldCommon" : {
        "type" : "record",
        "fields" : [ ]
      },
      "fabrics" : { },
      "instances" : { },
      "selected" : "default",
      "nonEditable" : [ ],
      "isSubscribedPipelineWithPipelineConfigs" : false
    },
    "sparkConf" : [ ],
    "hadoopConf" : [ ],
    "codeMode" : "sparse",
    "buildSystem" : "maven",
    "externalDependencies" : [ ],
    "dependentProjectExternalDependencies" : [ ],
    "isImported" : false,
    "interimMode" : "Full",
    "interimModeEnabled" : true,
    "visualCodeInterimMode" : "Disabled",
    "recordsLimit" : {
      "enabled" : false,
      "value" : 1000
    },
    "topLevelPackage" : "io.prophecy.pipelines.test",
    "configurationVersion" : "v1"
  },
  "connections" : [ {
    "id" : "rZDVNkE8FUvUDCSqEl35e",
    "source" : "ibQuaPI7HWtj20txBldD8$$3myd9v8RynL2SEv6mxR9c",
    "sourcePort" : "YCV4oty4pyaY11x7W9a4-$$q8pJRJirH3sP8Nllh59tQ",
    "target" : "bQ4DR_UX80CCwxypoKDZX$$gaxxIuFSxVWP3D9oJpunn",
    "targetPort" : "psJbc9s37PMDPlfvyEQPq$$8meL34H70mq7MqueJgrH1"
  }, {
    "id" : "8x1CNIC6grqYGJqwZX3H-$$u5bw5HNLkMCNFF1gWDZpd",
    "source" : "bQ4DR_UX80CCwxypoKDZX$$gaxxIuFSxVWP3D9oJpunn",
    "sourcePort" : "Qicn-zUjcyMocYZ1gaCS9$$w3aefte6hWzngC6_Igj9u",
    "target" : "lyGuoX4SF4ATw7xYFZEbb$$Tmy3CoWrfV_sJt4Cz-rEP",
    "targetPort" : "20xuBo5O-KabiHX0dfPwm$$oezBZL3rDTQk5Gklajvr3"
  } ],
  "processes" : {
    "or1wqGNQtFix7Ja5mCth7$$o84vuc9xcAjquwiJ52rda" : {
      "id" : "or1wqGNQtFix7Ja5mCth7$$o84vuc9xcAjquwiJ52rda",
      "component" : "Script",
      "metadata" : {
        "label" : "Script_0",
        "slug" : "Script_0",
        "x" : 160,
        "y" : 140,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : true
      },
      "properties" : {
        "script" : "val x = 1\nval y = 2",
        "scriptMethodHeader" : "def apply(spark: SparkSession): Unit = {",
        "scriptMethodFooter" : "    \n}"
      }
    },
    "ibQuaPI7HWtj20txBldD8$$3myd9v8RynL2SEv6mxR9c" : {
      "id" : "ibQuaPI7HWtj20txBldD8$$3myd9v8RynL2SEv6mxR9c",
      "component" : "Source",
      "metadata" : {
        "label" : "dummy_text",
        "slug" : "dummy_text",
        "x" : -600,
        "y" : -40,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "YCV4oty4pyaY11x7W9a4-$$q8pJRJirH3sP8Nllh59tQ",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      },
      "properties" : {
        "datasetId" : "datasets/dummy_text"
      }
    },
    "bQ4DR_UX80CCwxypoKDZX$$gaxxIuFSxVWP3D9oJpunn" : {
      "id" : "bQ4DR_UX80CCwxypoKDZX$$gaxxIuFSxVWP3D9oJpunn",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_1",
        "slug" : "Reformat_1",
        "x" : -420,
        "y" : -40,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "psJbc9s37PMDPlfvyEQPq$$8meL34H70mq7MqueJgrH1",
          "slug" : "in",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "value",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "Qicn-zUjcyMocYZ1gaCS9$$w3aefte6hWzngC6_Igj9u",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "expressions" : [ {
          "target" : "str_col",
          "expression" : {
            "format" : "sql",
            "expression" : "\"abc\""
          },
          "description" : ""
        } ]
      }
    },
    "lyGuoX4SF4ATw7xYFZEbb$$Tmy3CoWrfV_sJt4Cz-rEP" : {
      "id" : "lyGuoX4SF4ATw7xYFZEbb$$Tmy3CoWrfV_sJt4Cz-rEP",
      "component" : "Reformat",
      "metadata" : {
        "label" : "Reformat_2",
        "slug" : "Reformat_2",
        "x" : -160,
        "y" : -40,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "20xuBo5O-KabiHX0dfPwm$$oezBZL3rDTQk5Gklajvr3",
          "slug" : "in",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "str_col",
              "type" : "string",
              "nullable" : false,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ {
          "id" : "le-fJLylWbE4OSkgpF4mW$$B27HIa54YpRTV9lXq-1GO",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      },
      "properties" : {
        "columnsSelector" : [ "20xuBo5O-KabiHX0dfPwm$$oezBZL3rDTQk5Gklajvr3##str_col" ],
        "expressions" : [ {
          "target" : "test",
          "expression" : {
            "format" : "sql",
            "expression" : "expr(\"string_char(str_col, 1)\")"
          },
          "description" : ""
        }, {
          "target" : "other_test",
          "expression" : {
            "format" : "sql",
            "expression" : "string_char(str_col, 1)"
          },
          "description" : ""
        } ]
      }
    }
  },
  "ports" : {
    "inputs" : [ ],
    "outputs" : [ ],
    "selectedInputFields" : [ ],
    "isCustomOutputSchema" : false
  },
  "diagnostics" : [ {
    "property" : "$.workflow.processes.lyGuoX4SF4ATw7xYFZEbb$$Tmy3CoWrfV_sJt4Cz-rEP",
    "range" : {
      "start" : {
        "line" : 0,
        "character" : 0
      },
      "end" : {
        "line" : 0,
        "character" : 0
      }
    },
    "severity" : 1,
    "message" : "type mismatch;\n found   : org.apache.spark.sql.Column\n required: Int\n         object Reformat_2 { def apply(context: Context, in: DataFrame): DataFrame = in.select(expr(\"string_char(str_col, 1)\").as(\"test\"), string_char(col(\"str_col\"), lit(1)).as(\"other_test\")) }\n                                                                                                                                                                          ^",
    "tags" : [ ],
    "relatedInformation" : [ ]
  } ]
}